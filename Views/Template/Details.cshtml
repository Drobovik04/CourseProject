@using CourseProject
@using CourseProject.ViewModels
@using CourseProject.ViewModels.Template
@using Microsoft.Extensions.Localization
@using System.Security.Claims
@using System.Globalization
@inject IStringLocalizer<SharedResources> localizer
@model TemplateDetailsViewModel

<div class="container mt-5">
    <h2>@Model.Template.Title</h2>
    <p>@Model.Template.Description</p>
    <p><strong>@localizer["Topic"]:</strong> @(Model.Template.Topic?.Name ?? localizer["NoTopicSelected"])</p>
    <div class="d-flex align-items-center mb-3">
        <button id="like-btn" class="btn btn-outline-primary" data-template-id="@Model.Template.Id">
            <i id="like-icon" class="fa @(Model.UserHasLiked ? "fa-solid fa-thumbs-up" : "fa-regular fa-thumbs-up")"></i>
            <span id="like-text">@localizer["Like"]</span>
        </button>
        <span class="ms-2">@localizer["LikesCount"]:</span>
        <span id="likes-count" class="ms-2">@Model.Template.Likes.Count</span>
    </div>
    <a asp-controller="Form" asp-action="SubmitForm" asp-route-id="@Model.Template.Id" class="btn btn-primary mb-3">@localizer["FillForm"]</a>
    @if (Model.IsEditable)
    {
        <a asp-controller="Template" asp-action="Edit" asp-route-id="@Model.Template.Id" class="btn btn-primary mb-3">@localizer["EditTemplate"]</a>
        <a asp-controller="Template" asp-action="Answers" asp-route-id="@Model.Template.Id" class="btn btn-primary mb-3">@localizer["Answers"]</a>
        <a asp-controller="Template" asp-action="Statistics" asp-route-id="@Model.Template.Id" class="btn btn-primary mb-3">@localizer["Statistics"]</a>
        <form class="d-inline-block" asp-controller="Template" asp-action="Delete" asp-route-id="@Model.Template.Id">
            <button type="submit" class="btn btn-primary mb-3">@localizer["DeleteTemplate"]</button>
        </form>
    }
    <h3>@localizer["Questions"]</h3>
    <ul id="questions-container" class="list-group">
        @foreach (var item in Model.Questions.OrderBy(x => x.Order).Select((q, i) => new { i, q }))
        {
            <li class="list-group-item d-flex align-items-center" data-index="@item.i">
                <div class="flex-grow-1">
                    <label type="text" name="Questions[@item.i].Title" class="form-control mb-2">@item.q.Title</label>
                    <label name="Questions[@item.i].Type" class="form-control mb-2">
                        @if (item.q.Type == QuestionType.SingleLineText)
                        {
                            @localizer["SingleLineText"]
                        }
                        @if (item.q.Type == QuestionType.MultiLineText)
                        {
                            @localizer["MultiLineText"]
                        }
                        @if (item.q.Type == QuestionType.Checkbox)
                        {
                            @localizer["Checkbox"]
                        }
                        @if (item.q.Type == QuestionType.Integer)
                        {
                            @localizer["Number"]
                        }
                    </label>
                    <div class="form-check">
                        @if (item.q.ShowInResults)
                        {
                            <input type="checkbox" name="Questions[@item.i].ShowInResults" class="form-check-input" checked disabled/>
                        }
                        else
                        {
                            <input type="checkbox" name="Questions[@item.i].ShowInResults" class="form-check-input" disabled/>
                        }
                        <label class="form-check-label">@localizer["ShowInResults"]</label>
                    </div>
                </div>
            </li>
        }
    </ul>
    <h3>@localizer["YourAnswers"]</h3>
    @if (Model.UserAnswers.Any())
    {
        <ul class="list-group">
            @foreach (var answer in Model.UserAnswers)
            {
                <li class="list-group-item">
                    <strong>@localizer["SubmittedAt"]:</strong> @answer.SubmittedAt.ToString("g")
                    <a asp-controller="Form" asp-action="ViewAnswer" asp-route-id="@answer.Id" asp-route-returnUrl="@Url.Action("Details", "Template", new { id = answer.TemplateId })" class="btn btn-link">@localizer["View"]</a>
                </li>
            }
        </ul>
    }
    else
    {
        <p>@localizer["NoAnswers"]</p>
    }
    <h3>@localizer["Comments"]</h3>

    <button id="add-comment-btn" class="btn btn-primary mt-3 mb-3">@localizer["AddComment"]</button>

    <div id="comments-container">
        @foreach (var comment in Model.Template.Comments.OrderByDescending(x => x.CreatedAt))
        {
            <div id="comment-@comment.Id" class="comment-item p-3 rounded bg-light mb-2">
                <div class="d-flex justify-content-between">
                    <strong>@comment.User.UserName</strong>
                    <div>
                        @if (comment.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier) || User.IsInRole("Admin"))
                        {
                            <button class="btn btn-link btn-sm" data-author="@comment.UserId" data-comment-id="@comment.Id" onclick="editComment(@comment.Id)">@localizer["Edit"]</button>
                            <button class="btn btn-link btn-sm text-danger" data-author="@comment.UserId" data-comment-id="@comment.Id" onclick="deleteComment(@comment.Id)">@localizer["Delete"]</button>
                        }
                    </div>
                </div>
                <div class="text-muted small">@comment.CreatedAt.ToLocalTime().ToString("g")</div>
                <div class="mt-2">@comment.Text</div>
            </div>
        }
    </div>

</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.7/signalr.min.js"></script>
<script>
    const currentUserId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
    const isAdmin = @User.IsInRole("Admin").ToString().ToLower();

    const templateId = Number(new URLSearchParams(window.location.search).get('id'));
    const connection = new signalR.HubConnectionBuilder().withUrl("/CommentHub").build();

    document.getElementById('add-comment-btn').addEventListener('click', () => {
        const newCommentHtml = `
                    <div id="new-comment" class="comment-item p-3 rounded bg-light mb-2">
                        <textarea id="new-comment-text" class="form-control" placeholder=""></textarea>
                        <div class="mt-2 d-flex justify-content-end">
                            <button id="cancel-comment-btn" class="btn btn-secondary me-2">@localizer["Cancel"]</button>
                            <button id="save-comment-btn" class="btn btn-success">@localizer["Save"]</button>
                        </div>
                    </div>`;

        const commentsContainer = document.getElementById('comments-container');
        commentsContainer.insertAdjacentHTML('afterbegin', newCommentHtml);

        document.getElementById('cancel-comment-btn').addEventListener('click', () => {
            const newCommentDiv = document.getElementById('new-comment');
            newCommentDiv.remove();
        });

        document.getElementById('save-comment-btn').addEventListener('click', async () => {
            const text = document.getElementById('new-comment-text').value;
            if (!text.trim()) {
                alert('@localizer["CannotBeEmpty"]');
                return;
            }

            const response = await fetch('/Comment/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ Text: text, TemplateId: templateId })
            });

            if (response.ok) {
                document.getElementById('new-comment').remove();
            } else {
                alert('@localizer["ErrorSaveComment"]');
            }
        });
    });

    function deleteComment(commentId) {
        if (!confirm('@localizer["AreYouSure?"]')) {
            return;
        }

        fetch(`/Comment/DeleteComment?id=${commentId}`, {
            method: 'DELETE'
        })
            .then(response => {
                if (response.ok) {
                    removeCommentFromPage(commentId);
                } else {
                    alert('@localizer["ErrorDeleteComment"]');
                }
            })
    }

    connection.on("ReceiveComment", (comment) => {
        addCommentToPage(comment);
    });

    connection.on("UpdateComment", (updatedComment) => {
        updateCommentOnPage(updatedComment);
    });

    connection.on("DeleteComment", (commentId) => {
        removeCommentFromPage(commentId);
    });

    connection.start().then(() => {
        connection.invoke("JoinTemplateGroup", templateId);
    });

    function addCommentToPage(comment) {
        const commentsContainer = document.getElementById("comments-container");
        const localTime = formatDateToShort(comment.createdAt).replace(',', '');
        const commentHtml = `
                    <div id="comment-${comment.id}" class="comment-item p-3 rounded bg-light mb-2">
                        <div class="d-flex justify-content-between">
                            <strong>${comment.author}</strong>
                            <div>
                                <button class="btn btn-link btn-sm edit-button"
                                        data-author="${comment.userId}"
                                        data-comment-id="${comment.id}"
                                        style="display: none;"
                                        onclick="editComment(${comment.id})">@localizer["Edit"]</button>
                                <button class="btn btn-link btn-sm text-danger delete-button"
                                        data-author="${comment.userId}"
                                        data-comment-id="${comment.id}"
                                        style="display: none;"
                                        onclick="deleteComment(${comment.id})">@localizer["Delete"]</button>
                            </div>
                        </div>
                        <div class="text-muted small">${localTime}</div>
                        <div class="mt-2">${comment.text}</div>
                    </div>`;
        commentsContainer.insertAdjacentHTML("afterbegin", commentHtml);
        const newCommentDiv = document.getElementById(`comment-${comment.id}`);
        if (isAdmin || comment.userId === currentUserId) {
            newCommentDiv.querySelectorAll(`button[data-comment-id="${comment.id}"]`).forEach(button => {
                button.style.display = "inline-block";
            });
        }
    }

    function formatDateToShort(dateString) {
        const date = new Date(dateString);

        const options = {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
        };

        return new Intl.DateTimeFormat('ru-RU', options).format(date);
    }
    function updateCommentOnPage(updatedComment) {
        const commentDiv = document.getElementById(`comment-${updatedComment.id}`);
        if (commentDiv) {
            commentDiv.querySelector(".mt-2").textContent = updatedComment.text;
        }
    }

    function removeCommentFromPage(commentId) {
        const commentDiv = document.getElementById(`comment-${commentId}`);
        if (commentDiv) {
            commentDiv.remove();
        }
    }

    function editComment(commentId) {
        const commentDiv = document.getElementById(`comment-${commentId}`);
        const commentText = commentDiv.querySelector('.mt-2').textContent.trim();

        commentDiv.querySelector('.mt-2').innerHTML = `
            <textarea id="edit-comment-text-${commentId}" class="form-control">${commentText}</textarea>
            <div class="mt-2 d-flex justify-content-end">
                <button class="btn btn-secondary me-2" onclick="cancelEditComment(${commentId}, '${commentText}')">@localizer["Cancel"]</button>
                <button class="btn btn-success" onclick="saveComment(${commentId})">@localizer["Save"]</button>
            </div>
        `;
    }

    function cancelEditComment(commentId, originalText) {
        const commentDiv = document.getElementById(`comment-${commentId}`);
        commentDiv.querySelector('.mt-2').textContent = originalText;
    }

    function saveComment(commentId) {
        const newText = document.getElementById(`edit-comment-text-${commentId}`).value.trim();

        if (!newText) {
            alert('@localizer["CannotBeEmpty"]');
            return;
        }

        fetch(`/Comment/UpdateComment?id=${commentId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ text: newText })
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        const likeButton = document.getElementById("like-btn");
        const likeIcon = document.getElementById("like-icon");
        const likeText = document.getElementById("like-text");
        const likesCount = document.getElementById("likes-count");

        likeButton.addEventListener("click", async () => {
            const templateId = likeButton.dataset.templateId;
            const response = await fetch(`/Template/ToggleLike?templateId=${templateId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (response.ok) {
                try {
                    const data = await response.json();
                    likesCount.textContent = data.likesCount;

                    if (data.userHasLiked) {
                        likeIcon.classList.remove("fa-regular");
                        likeIcon.classList.add("fa-solid");
                        likeText.textContent = "@localizer["Unlike"]";
                    } else {
                        likeIcon.classList.remove("fa-solid");
                        likeIcon.classList.add("fa-regular");
                        likeText.textContent = "@localizer["Like"]";
                    }
                }
                catch {
                    console.log("@localizer["NoPermission"]");
                }
            } 
            else {
                alert("@localizer["ErrorProcessingLike"]");
            }
        });
    });
</script>